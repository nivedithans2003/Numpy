import numpy as np

class NumPyCalculator:
    def __init__(self, arr1, arr2=None):
        self.arr1 = np.array(arr1)
        if arr2 is not None:
            self.arr2 = np.array(arr2)
        else:
            self.arr2 = None

    # --- Arithmetic Operations ---
    def add(self):
        return self.arr1 + self.arr2

    def subtract(self):
        return self.arr1 - self.arr2

    def multiply(self):
        return self.arr1 * self.arr2

    def divide(self):
        return np.divide(self.arr1, self.arr2, out=np.zeros_like(self.arr1, dtype=float), where=self.arr2 != 0)

    def power(self):
        return np.power(self.arr1, self.arr2)

    # --- Statistical Operations ---
    def mean(self):
        return np.mean(self.arr1)

    def median(self):
        return np.median(self.arr1)

    def std_dev(self):
        return np.std(self.arr1)

    def variance(self):
        return np.var(self.arr1)

    def minimum(self):
        return np.min(self.arr1)

    def maximum(self):
        return np.max(self.arr1)

    def total_sum(self):
        return np.sum(self.arr1)

    def total_product(self):
        return np.prod(self.arr1)

    def get_shape(self):
        return self.arr1.shape

    def get_size(self):
        return self.arr1.size

    def get_dtype(self):
        return self.arr1.dtype

    # --- Array Manipulation ---
    def reshape(self, new_shape):
        try:
            return self.arr1.reshape(new_shape)
        except ValueError as e:
            return f"Error: {e}"

    def sort(self, reverse=False):
        if reverse:
            return np.sort(self.arr1)[::-1]
        else:
            return np.sort(self.arr1)

    def unique_values(self):
        return np.unique(self.arr1)

    def first_element(self):
        return self.arr1.flatten()[0]

    def last_element(self):
        return self.arr1.flatten()[-1]

    def filter_greater_than_mean(self):
        mean_val = self.mean()
        return self.arr1[self.arr1 > mean_val]


# --- Menu-driven Program ---
while True:
    print("\n===== NumPy Calculator =====")
    print("1. Arithmetic Operations")
    print("2. Statistical Operations")
    print("3. Array Manipulation")
    print("4. Exit")

    choice = input("Enter your choice (1-4): ").strip()

    # ---- ARITHMETIC OPERATIONS ----
    if choice == '1':
        try:
            arr1 = list(map(float, input("Enter first array elements separated by space: ").split()))
            arr2 = list(map(float, input("Enter second array elements separated by space: ").split()))
            calc = NumPyCalculator(arr1, arr2)

            print("\n--- Arithmetic Results ---")
            print("Addition:", calc.add())
            print("Subtraction:", calc.subtract())
            print("Multiplication:", calc.multiply())
            print("Division:", calc.divide())
            print("Power:", calc.power())

        except ValueError:
            print("‚ùå Invalid input! Please enter only numeric values separated by spaces.")

    # ---- STATISTICAL OPERATIONS ----
    elif choice == '2':
        try:
            arr1 = list(map(float, input("Enter array elements separated by space: ").split()))
            calc = NumPyCalculator(arr1)

            print("\n--- Statistical Results ---")
            print("Mean:", calc.mean())
            print("Median:", calc.median())
            print("Standard Deviation:", calc.std_dev())
            print("Variance:", calc.variance())
            print("Minimum:", calc.minimum())
            print("Maximum:", calc.maximum())
            print("Sum:", calc.total_sum())
            print("Product:", calc.total_product())
            print("Shape:", calc.get_shape())
            print("Size:", calc.get_size())
            print("Data Type:", calc.get_dtype())

        except ValueError:
            print("‚ùå Invalid input! Please enter only numeric values separated by spaces.")

    # ---- ARRAY MANIPULATION ----
    elif choice == '3':
        try:
            rows = int(input("Enter number of rows: ").strip())
            cols = int(input("Enter number of columns: ").strip())

            print(f"Enter {rows * cols} elements separated by space:")
            elements = list(map(float, input().split()))

            if len(elements) != rows * cols:
                print(f"‚ùå You must enter exactly {rows * cols} elements.")
                continue

            arr1 = np.array(elements).reshape(rows, cols)
            calc = NumPyCalculator(arr1)

            print("\n--- Array Manipulation ---")
            print("Original Array:\n", calc.arr1)
            print("Sorted:", calc.sort())
            print("Reverse Sorted:", calc.sort(reverse=True))
            print("Unique Values:", calc.unique_values())
            print("First Element:", calc.first_element())
            print("Last Element:", calc.last_+element())
            print("Values greater than mean:", calc.filter_greater_than_mean())

            try:
                new_shape = tuple(map(int, input("Enter new shape (e.g., 3 2): ").split()))
                print("Reshaped Array:\n", calc.reshape(new_shape))
            except ValueError:
                print("‚ùå Invalid shape entered.")

        except ValueError:
            print("‚ùå Please enter valid numbers for rows, columns, and elements.")

    # ---- EXIT ----
    elif choice == '4':
        print("‚úÖ Exiting program. Goodbye üëã")
        break

    else:
        print("‚ùå Invalid choice! Please enter a number between 1 and 4.")
ss